// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	models "loc-web-app/backend/internal/models"
)

const getRepo = `-- name: GetRepo :one
SELECT id, url, site, owner, name, created_at, stats FROM "repostats"
WHERE site=$1 and owner = $2 and name = $3
LIMIT 1
`

type GetRepoParams struct {
	Site  string
	Owner string
	Name  string
}

func (q *Queries) GetRepo(ctx context.Context, arg GetRepoParams) (*Repostat, error) {
	row := q.db.QueryRow(ctx, getRepo, arg.Site, arg.Owner, arg.Name)
	var i Repostat
	err := row.Scan(
		&i.ID,
		&i.Url,
		&i.Site,
		&i.Owner,
		&i.Name,
		&i.CreatedAt,
		&i.Stats,
	)
	return &i, err
}

const saveRepo = `-- name: SaveRepo :one
INSERT INTO "repostats" (
    url,
    site,
    owner,
    name,
    stats
) VALUES ($1, $2, $3, $4, $5) 
RETURNING id, created_at
`

type SaveRepoParams struct {
	Url   string
	Site  string
	Owner string
	Name  string
	Stats models.LanguageSummary
}

type SaveRepoRow struct {
	ID        pgtype.Int8
	CreatedAt pgtype.Timestamptz
}

func (q *Queries) SaveRepo(ctx context.Context, arg SaveRepoParams) (*SaveRepoRow, error) {
	row := q.db.QueryRow(ctx, saveRepo,
		arg.Url,
		arg.Site,
		arg.Owner,
		arg.Name,
		arg.Stats,
	)
	var i SaveRepoRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return &i, err
}
